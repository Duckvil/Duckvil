#include "CSharp/Entity.h"
#include "RuntimeReflection/Recorder.h"
#include "RuntimeReflection/GeneratedMeta.h"


DUCKVIL_RUNTIME_REFLECTION_RECORD(1)
{
using namespace Duckvil::RuntimeReflection;
using namespace Duckvil;
DUCKVIL_RESOURCE(type_t) _type;
DUCKVIL_RESOURCE(property_t) _property;
DUCKVIL_RESOURCE(constructor_t) _constructor;
DUCKVIL_RESOURCE(destructor_t) _destructor;
DUCKVIL_RESOURCE(function_t) _function;
DUCKVIL_RESOURCE(enum_t) _enum;
DUCKVIL_RESOURCE(enum_element_t) _enumElement;
DUCKVIL_RESOURCE(ntype_t) _ntype;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t> _recordedTypes;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t> _recordedNTypes;
std::vector<const char*> _namespaces;
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("CSharp");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("ScriptField");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
using namespace Duckvil::CSharp;
_type = record_type<Duckvil::CSharp::ScriptField>(_data, "ScriptField");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "CSharp");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 1);
_property = record_property<Duckvil::CSharp::CSharp::ScriptFieldType>(_data, _type, offsetof(Duckvil::CSharp::ScriptField, m_type), "m_type");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::CSharp::ScriptField, m_monoField), "m_monoField");
_namespaces.pop_back();
_namespaces.push_back("ScriptProperty");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::CSharp::ScriptProperty>(_data, "ScriptProperty");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "CSharp");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 1);
_property = record_property<Duckvil::CSharp::CSharp::ScriptFieldType>(_data, _type, offsetof(Duckvil::CSharp::ScriptProperty, m_type), "m_type");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::CSharp::ScriptProperty, m_pMonoProperty), "m_pMonoProperty");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::CSharp::ScriptProperty, m_pGetMethod), "m_pGetMethod");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::CSharp::ScriptProperty, m_pSetMethod), "m_pSetMethod");
_namespaces.pop_back();
_namespaces.push_back("Script");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::CSharp::Script>(_data, "Script");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "CSharp");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 1);
record_meta(_data, _type, "aaa", 1);
record_meta(_data, _type, "bbb", true);
record_meta(_data, _type, "ccc", ScriptProperty());
record_inheritance<NativeScriptBase>(_data, _type, __protection::__protection_public);
record_inheritance<Editor::Widget>(_data, _type, __protection::__protection_public);
_constructor = record_constructor<Duckvil::CSharp::Script>(_data, _type);
_destructor = record_destructor<Duckvil::CSharp::Script>(_data, _type);
_function = record_function<Duckvil::CSharp::Script, void, double>(_data, _type, &Duckvil::CSharp::Script::Update, "Update");
_function = record_function<Duckvil::CSharp::Script, bool>(_data, _type, &Duckvil::CSharp::Script::Init, "Init");
_function = record_function<void, char const***, uint32_t*, void*>(_data, _type, &Duckvil::CSharp::Script::GetScripts, "GetScripts");
_function = record_function<Duckvil::CSharp::Script, void, char const*, void*>(_data, _type, &Duckvil::CSharp::Script::CreateScript, "CreateScript");
_function = record_function<Duckvil::CSharp::Script, void>(_data, _type, &Duckvil::CSharp::Script::DrawDetails, "DrawDetails");
_function = record_function<Duckvil::CSharp::Script, std::unordered_map<std::string, ScriptField> const&>(_data, _type, &Duckvil::CSharp::Script::GetFields, "GetFields");
_function = record_function<Duckvil::CSharp::Script, void, void*>(_data, _type, &Duckvil::CSharp::Script::InitEditor, "InitEditor");
_function = record_function<Duckvil::CSharp::Script, void>(_data, _type, &Duckvil::CSharp::Script::OnDraw, "OnDraw");
_function = record_function<void*, void*>(_data, _type, &Duckvil::CSharp::Script::Cast, "Cast");
record_meta(_data, _type, _function, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated, true);
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
return duckvil_recorded_types_create(_data._pMemoryInterface, _data._pAllocator, _recordedTypes, "CSharp/Entity.h", 1);
}
#ifdef DUCKVIL_RUNTIME_COMPILE
DUCKVIL_EXPORT uint32_t duckvil_get_recorder_index()
{
return 1;
}
#endif
