#include "CSharp/TestSharedScript.h"
#include "RuntimeReflection/Recorder.h"
#include "RuntimeReflection/GeneratedMeta.h"

#include "mono/jit/jit.h"
#include "mono/metadata/assembly.h"
void Sandbox::TestSharedScript::a(int _v) { _an_a = _v; mono_field_set_value(static_cast<MonoObject*>(m_pCSharpObject), m_pCSharpField_a, (void*)&_v); }
int Sandbox::TestSharedScript::a() const { return _an_a; }
void Sandbox::TestSharedScript::generated_csharp_Say(int a)
{
void* _params[1];
_params[0] = & a;
mono_runtime_invoke(m_pCSharpMethod_Say, m_pCSharpObject, _params, nullptr);
}
void Sandbox::TestSharedScript::generated_csharp_Say(duckvil_cs_Say _args)
{
generated_csharp_Say(_args. a);
}
void Sandbox::TestSharedScript::Say(int a)
{
generated_csharp_Say({  a });
}
void Sandbox::TestSharedScript::generated_csharp_Initialize()
{
mono_runtime_invoke(m_pCSharpMethod_Initialize, m_pCSharpObject, nullptr, nullptr);
}
void Sandbox::TestSharedScript::generated_csharp_Initialize(duckvil_cs_Initialize _args)
{
generated_csharp_Initialize();
}
void Sandbox::TestSharedScript::Initialize()
{
generated_csharp_Initialize({  });
}
void Sandbox::TestSharedScript:: csharp_internal_HelloFrom(size_t _ullSharedScriptID, int a){
auto _csEngine = Duckvil::CSharp::CSharp::GetScriptEngine();
TestSharedScript* _script = static_cast<TestSharedScript*>(_csEngine->GetSharedScript(_ullSharedScriptID));
_script->HelloFrom(a);
}
void Sandbox::TestSharedScript::InternalInit()
{
mono_add_internal_call("Sandbox.TestSharedScript::HelloFrom", csharp_internal_HelloFrom);
m_pCSharpMethod_Say = mono_class_get_method_from_name(static_cast<MonoClass*>(m_pCSharpClass), "Say", 1);
m_pCSharpMethod_Initialize = mono_class_get_method_from_name(static_cast<MonoClass*>(m_pCSharpClass), "Initialize", 0);
m_pCSharpField_a = mono_class_get_field_from_name(static_cast<MonoClass*>(m_pCSharpClass), "_an_a");
mono_add_internal_call("Sandbox.TestSharedScript::VariableChanged_a", csharp_internal_VariableChanged_a);
}

DUCKVIL_RUNTIME_REFLECTION_RECORD(6)
{
using namespace Duckvil::RuntimeReflection;
using namespace Duckvil;
DUCKVIL_RESOURCE(type_t) _type;
DUCKVIL_RESOURCE(property_t) _property;
DUCKVIL_RESOURCE(constructor_t) _constructor;
DUCKVIL_RESOURCE(destructor_t) _destructor;
DUCKVIL_RESOURCE(function_t) _function;
DUCKVIL_RESOURCE(enum_t) _enum;
DUCKVIL_RESOURCE(enum_element_t) _enumElement;
DUCKVIL_RESOURCE(ntype_t) _ntype;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t> _recordedTypes;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t> _recordedNTypes;
std::vector<const char*> _namespaces;
{
_namespaces.push_back("Sandbox");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("TestSharedScript");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
using namespace Sandbox;
_type = record_type<Sandbox::TestSharedScript>(_data, "TestSharedScript");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Sandbox");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 6);
record_inheritance<Duckvil::CSharp::SharedScript>(_data, _type, __protection::__protection_public);
_constructor = record_constructor<Sandbox::TestSharedScript>(_data, _type);
_destructor = record_destructor<Sandbox::TestSharedScript>(_data, _type);
_property = record_property<int>(_data, _type, offsetof(Sandbox::TestSharedScript, _an_a), "_an_a");
record_meta(_data, _type, _property, CSharp::ReflectionFlags::EXPOSE_TO_CSHARP, true);
_function = record_function<Sandbox::TestSharedScript, bool>(_data, _type, &Sandbox::TestSharedScript::Init, "Init");
_function = record_function<Sandbox::TestSharedScript, void, int>(_data, _type, &Sandbox::TestSharedScript::HelloFrom, "HelloFrom");
record_meta(_data, _type, _function, CSharp::ReflectionFlags::EXPOSE_TO_CSHARP, true);
_function = record_function<void*, void*>(_data, _type, &Sandbox::TestSharedScript::Cast, "Cast");
record_meta(_data, _type, _function, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated, true);
_function = record_function<Sandbox::TestSharedScript, void, Duckvil::RuntimeSerializer::ISerializer*>(_data, _type, &Sandbox::TestSharedScript::Serialize, "Serialize");
record_meta(_data, _type, _function, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated, true);
_namespaces.pop_back();
_namespaces.pop_back();
}
return duckvil_recorded_types_create(_data._pMemoryInterface, _data._pAllocator, _recordedTypes, "CSharp/TestSharedScript.h", 6);
}
#ifdef DUCKVIL_RUNTIME_COMPILE
DUCKVIL_EXPORT uint32_t duckvil_get_recorder_index()
{
return 6;
}
#endif
