#include "Memory/Memory.h"
#include "RuntimeReflection/Recorder.h"
#include "RuntimeReflection/GeneratedMeta.h"


DUCKVIL_RUNTIME_REFLECTION_RECORD(22)
{
using namespace Duckvil::RuntimeReflection;
using namespace Duckvil;
DUCKVIL_RESOURCE(type_t) _type;
DUCKVIL_RESOURCE(property_t) _property;
DUCKVIL_RESOURCE(constructor_t) _constructor;
DUCKVIL_RESOURCE(destructor_t) _destructor;
DUCKVIL_RESOURCE(function_t) _function;
DUCKVIL_RESOURCE(enum_t) _enum;
DUCKVIL_RESOURCE(enum_element_t) _enumElement;
DUCKVIL_RESOURCE(ntype_t) _ntype;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t> _recordedTypes;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t> _recordedNTypes;
std::vector<const char*> _namespaces;
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("Memory");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
using namespace Duckvil::Memory;
_type = record_type<Duckvil::Memory::allocator>(_data, "allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::allocator, m_ullCapacity), "m_ullCapacity");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::allocator, m_ullUsed), "m_ullUsed");
_namespaces.pop_back();
_namespaces.push_back("linear_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::linear_allocator>(_data, "linear_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_namespaces.pop_back();
_namespaces.push_back("stack_header");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::stack_header>(_data, "stack_header");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::stack_header, m_ullElementSize), "m_ullElementSize");
_property = record_property<uint8_t>(_data, _type, offsetof(Duckvil::Memory::stack_header, m_ucPadding), "m_ucPadding");
_namespaces.pop_back();
_namespaces.push_back("stack_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::stack_allocator>(_data, "stack_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_namespaces.pop_back();
_namespaces.push_back("fixed_stack_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_stack_allocator>(_data, "fixed_stack_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("queue_header");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::queue_header>(_data, "queue_header");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_header, m_ullElementSize), "m_ullElementSize");
_property = record_property<uint8_t>(_data, _type, offsetof(Duckvil::Memory::queue_header, m_ucPadding), "m_ucPadding");
_namespaces.pop_back();
_namespaces.push_back("queue_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::queue_allocator>(_data, "queue_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_allocator, m_ullTail), "m_ullTail");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_allocator, m_ullHead), "m_ullHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_queue_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_queue_allocator>(_data, "fixed_queue_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullBlockSize), "m_ullBlockSize");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullTail), "m_ullTail");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullHead), "m_ullHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_array_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_array_allocator>(_data, "fixed_array_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_array_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("__free_list_node");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.pop_back();
_namespaces.push_back("free_list_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::free_list_allocator>(_data, "free_list_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<__free_list_node*>(_data, _type, offsetof(Duckvil::Memory::free_list_allocator, m_pHead), "m_pHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_vector_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_vector_allocator>(_data, "fixed_vector_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("byte_buffer_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::byte_buffer_allocator>(_data, "byte_buffer_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_allocator, m_ullPosition), "m_ullPosition");
_namespaces.pop_back();
_namespaces.push_back("fixed_stack_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_stack_container>(_data, "fixed_stack_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::fixed_stack_container::allocate>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::fixed_stack_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::fixed_stack_container::top>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnTop), "m_fnTop");
_property = record_property<Duckvil::Memory::fixed_stack_container::pop>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnPop), "m_fnPop");
_property = record_property<Duckvil::Memory::fixed_stack_container::empty>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::fixed_stack_container::full>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::fixed_stack_container::clear>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::fixed_stack_container::size>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::fixed_stack_container::capacity>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_container, m_fnCapacity), "m_fnCapacity");
_namespaces.pop_back();
_namespaces.push_back("fixed_queue_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_queue_container>(_data, "fixed_queue_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::fixed_queue_container::allocate>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::fixed_queue_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::fixed_queue_container::begin>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnBegin), "m_fnBegin");
_property = record_property<Duckvil::Memory::fixed_queue_container::pop>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnPop), "m_fnPop");
_property = record_property<Duckvil::Memory::fixed_queue_container::empty>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::fixed_queue_container::full>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::fixed_queue_container::clear>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::fixed_queue_container::resize>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnResize), "m_fnResize");
_property = record_property<Duckvil::Memory::fixed_queue_container::size>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::fixed_queue_container::capacity>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_container, m_fnCapacity), "m_fnCapacity");
_namespaces.pop_back();
_namespaces.push_back("fixed_vector_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_vector_container>(_data, "fixed_vector_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::fixed_vector_container::allocate>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::fixed_vector_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::fixed_vector_container::begin>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnBegin), "m_fnBegin");
_property = record_property<Duckvil::Memory::fixed_vector_container::back>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnBack), "m_fnBack");
_property = record_property<Duckvil::Memory::fixed_vector_container::end>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnEnd), "m_fnEnd");
_property = record_property<Duckvil::Memory::fixed_vector_container::at>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnAt), "m_fnAt");
_property = record_property<Duckvil::Memory::fixed_vector_container::empty>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::fixed_vector_container::full>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::fixed_vector_container::clear>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::fixed_vector_container::resize>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnResize), "m_fnResize");
_property = record_property<Duckvil::Memory::fixed_vector_container::size>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::fixed_vector_container::capacity>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnCapacity), "m_fnCapacity");
_property = record_property<Duckvil::Memory::fixed_vector_container::erase>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnErase), "m_fnErase");
_property = record_property<Duckvil::Memory::fixed_vector_container::copy>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_container, m_fnCopy), "m_fnCopy");
_namespaces.pop_back();
_namespaces.push_back("fixed_array_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_array_container>(_data, "fixed_array_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::fixed_array_container::allocate>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::fixed_array_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::fixed_array_container::begin>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnBegin), "m_fnBegin");
_property = record_property<Duckvil::Memory::fixed_array_container::back>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnBack), "m_fnBack");
_property = record_property<Duckvil::Memory::fixed_array_container::at>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnAt), "m_fnAt");
_property = record_property<Duckvil::Memory::fixed_array_container::empty>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::fixed_array_container::full>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::fixed_array_container::size>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::fixed_array_container::clear>(_data, _type, offsetof(Duckvil::Memory::fixed_array_container, m_fnClear), "m_fnClear");
_namespaces.pop_back();
_namespaces.push_back("stack_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::stack_container>(_data, "stack_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::stack_container::allocate>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::stack_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::stack_container::top>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnTop), "m_fnTop");
_property = record_property<Duckvil::Memory::stack_container::pop>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnPop), "m_fnPop");
_property = record_property<Duckvil::Memory::stack_container::empty>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::stack_container::full>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::stack_container::clear>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::stack_container::size>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::stack_container::capacity>(_data, _type, offsetof(Duckvil::Memory::stack_container, m_fnCapacity), "m_fnCapacity");
_namespaces.pop_back();
_namespaces.push_back("queue_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::queue_container>(_data, "queue_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::queue_container::allocate>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnAllocate), "m_fnAllocate");
_property = record_property<Duckvil::Memory::queue_container::allocate_size>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnAllocateSize), "m_fnAllocateSize");
_property = record_property<Duckvil::Memory::queue_container::begin>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnBegin), "m_fnBegin");
_property = record_property<Duckvil::Memory::queue_container::pop>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnPop), "m_fnPop");
_property = record_property<Duckvil::Memory::queue_container::empty>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnEmpty), "m_fnEmpty");
_property = record_property<Duckvil::Memory::queue_container::full>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnFull), "m_fnFull");
_property = record_property<Duckvil::Memory::queue_container::clear>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::queue_container::resize>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnResize), "m_fnResize");
_property = record_property<Duckvil::Memory::queue_container::size>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnSize), "m_fnSize");
_property = record_property<Duckvil::Memory::queue_container::capacity>(_data, _type, offsetof(Duckvil::Memory::queue_container, m_fnCapacity), "m_fnCapacity");
_namespaces.pop_back();
_namespaces.push_back("byte_buffer_container");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::byte_buffer_container>(_data, "byte_buffer_container");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::byte_buffer_container::will_fit>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnWillFit), "m_fnWillFit");
_property = record_property<Duckvil::Memory::byte_buffer_container::clear>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnClear), "m_fnClear");
_property = record_property<Duckvil::Memory::byte_buffer_container::resize>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnResize), "m_fnResize");
_property = record_property<Duckvil::Memory::byte_buffer_container::seek_to_begin>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnSeekToBegin), "m_fnSeekToBegin");
_property = record_property<Duckvil::Memory::byte_buffer_container::seek_to_end>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnSeekToEnd), "m_fnSeekToEnd");
_property = record_property<Duckvil::Memory::byte_buffer_container::advance>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnAdvance), "m_fnAdvance");
_property = record_property<Duckvil::Memory::byte_buffer_container::write>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnWrite), "m_fnWrite");
_property = record_property<Duckvil::Memory::byte_buffer_container::read>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_container, m_fnRead), "m_fnRead");
_namespaces.pop_back();
_namespaces.push_back("ftable");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::ftable>(_data, "ftable");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<Duckvil::Memory::ftable::_basic_allocate>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnBasicAllocate), "m_fnBasicAllocate");
_property = record_property<Duckvil::Memory::ftable::_basic_free>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnBasicFree), "m_fnBasicFree");
_property = record_property<Duckvil::Memory::ftable::_calculate_aligned_pointer>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculateAlignedPointer), "m_fnCalculateAlignedPointer");
_property = record_property<Duckvil::Memory::ftable::_calculate_padding>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePadding), "m_fnCalculatePadding");
_property = record_property<Duckvil::Memory::ftable::_calculate_padding_h>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePaddingH), "m_fnCalculatePaddingH");
_property = record_property<Duckvil::Memory::ftable::_calculate_aligned_pointer_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculateAlignedPointer_), "m_fnCalculateAlignedPointer_");
_property = record_property<Duckvil::Memory::ftable::_calculate_padding_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePadding_), "m_fnCalculatePadding_");
_property = record_property<Duckvil::Memory::ftable::_calculate_padding_h_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePaddingH_), "m_fnCalculatePaddingH_");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocate), "m_fnLinearAllocate");
_property = record_property<Duckvil::Memory::ftable::_linear_clear>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearClear), "m_fnLinearClear");
_property = record_property<Duckvil::Memory::fixed_stack_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fixedStackContainer), "m_fixedStackContainer");
_property = record_property<Duckvil::Memory::fixed_queue_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fixedQueueContainer), "m_fixedQueueContainer");
_property = record_property<Duckvil::Memory::fixed_vector_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fixedVectorContainer), "m_fixedVectorContainer");
_property = record_property<Duckvil::Memory::fixed_array_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fixedArrayContainer), "m_fixedArrayContainer");
_property = record_property<Duckvil::Memory::stack_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_stackContainer), "m_stackContainer");
_property = record_property<Duckvil::Memory::queue_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_queueContainer), "m_queueContainer");
_property = record_property<Duckvil::Memory::byte_buffer_container>(_data, _type, offsetof(Duckvil::Memory::ftable, m_byteBufferContainer), "m_byteBufferContainer");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocate_), "m_fnFreeListAllocate_");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_d_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocate_D_), "m_fnFreeListAllocate_D_");
_property = record_property<Duckvil::Memory::ftable::_free_list_reallocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListReallocate_), "m_fnFreeListReallocate_");
_property = record_property<Duckvil::Memory::ftable::_free_list_free_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListFree_), "m_fnFreeListFree_");
_property = record_property<Duckvil::Memory::ftable::_free_list_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListClear_), "m_fnFreeListClear_");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_linear_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateLinearAllocator), "m_fnLinearAllocateLinearAllocator");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_fixed_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedStackAllocator), "m_fnLinearAllocateFixedStackAllocator");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_fixed_array_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedArrayAllocator), "m_fnLinearAllocateFixedArrayAllocator");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_free_list_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFreeListAllocator), "m_fnLinearAllocateFreeListAllocator");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_fixed_vector_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedVectorAllocator), "m_fnLinearAllocateFixedVectorAllocator");
_property = record_property<Duckvil::Memory::ftable::_linear_allocate_byte_buffer_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateByteBufferAllocator), "m_fnLinearAllocateByteBufferAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_queue_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateQueueAllocator), "m_fnFreeListAllocateQueueAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_fixed_queue_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedQueueAllocator), "m_fnFreeListAllocateFixedQueueAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_free_list_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFreeListAllocator), "m_fnFreeListAllocateFreeListAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_fixed_vector_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedVectorAllocator), "m_fnFreeListAllocateFixedVectorAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateStackAllocator), "m_fnFreeListAllocateStackAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_fixed_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedStackAllocator), "m_fnFreeListAllocateFixedStackAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_fixed_array_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedArrayAllocator), "m_fnFreeListAllocateFixedArrayAllocator");
_property = record_property<Duckvil::Memory::ftable::_free_list_allocate_byte_buffer_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateByteBufferAllocator), "m_fnFreeListAllocateByteBufferAllocator");
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
return duckvil_recorded_types_create(_data._pMemoryInterface, _data._pAllocator, _recordedTypes, "Memory/Memory.h", 22);
}
#ifdef DUCKVIL_RUNTIME_COMPILE
DUCKVIL_EXPORT uint32_t duckvil_get_recorder_index()
{
return 22;
}
#endif
