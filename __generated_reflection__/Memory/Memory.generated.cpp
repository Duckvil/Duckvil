#include "Memory/Memory.h"
#include "RuntimeReflection/Recorder.h"
#include "RuntimeReflection/GeneratedMeta.h"


DUCKVIL_RUNTIME_REFLECTION_RECORD(22)
{
using namespace Duckvil::RuntimeReflection;
using namespace Duckvil;
DUCKVIL_RESOURCE(type_t) _type;
DUCKVIL_RESOURCE(property_t) _property;
DUCKVIL_RESOURCE(constructor_t) _constructor;
DUCKVIL_RESOURCE(destructor_t) _destructor;
DUCKVIL_RESOURCE(function_t) _function;
DUCKVIL_RESOURCE(enum_t) _enum;
DUCKVIL_RESOURCE(enum_element_t) _enumElement;
DUCKVIL_RESOURCE(ntype_t) _ntype;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t> _recordedTypes;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t> _recordedNTypes;
std::vector<const char*> _namespaces;
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("Memory");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
using namespace Duckvil::Memory;
_type = record_type<Duckvil::Memory::allocator>(_data, "allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
#ifdef DUCKVIL_MEMORY_DEBUGGER
_property = record_property<void(*)(allocator*, allocator*, duckvil_memory_allocator_type)>(_data, _type, offsetof(Duckvil::Memory::allocator, m_fnOnAllocate), "m_fnOnAllocate");
#endif
#ifdef DUCKVIL_MEMORY_DEBUGGER
_property = record_property<void(*)(allocator*, allocator*)>(_data, _type, offsetof(Duckvil::Memory::allocator, m_fnOnDeallocate), "m_fnOnDeallocate");
#endif
#ifdef DUCKVIL_MEMORY_DEBUGGER
_property = record_property<duckvil_memory_debug_info*>(_data, _type, offsetof(Duckvil::Memory::allocator, m_pDebugData), "m_pDebugData");
#endif
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::allocator, m_ullCapacity), "m_ullCapacity");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::allocator, m_ullUsed), "m_ullUsed");
_namespaces.pop_back();
_namespaces.push_back("linear_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::linear_allocator>(_data, "linear_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_namespaces.pop_back();
_namespaces.push_back("stack_header");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::stack_header>(_data, "stack_header");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::stack_header, m_ullElementSize), "m_ullElementSize");
_property = record_property<uint8_t>(_data, _type, offsetof(Duckvil::Memory::stack_header, m_ucPadding), "m_ucPadding");
_namespaces.pop_back();
_namespaces.push_back("stack_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::stack_allocator>(_data, "stack_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_namespaces.pop_back();
_namespaces.push_back("fixed_stack_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_stack_allocator>(_data, "fixed_stack_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_stack_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("queue_header");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::queue_header>(_data, "queue_header");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_header, m_ullElementSize), "m_ullElementSize");
_property = record_property<uint8_t>(_data, _type, offsetof(Duckvil::Memory::queue_header, m_ucPadding), "m_ucPadding");
_namespaces.pop_back();
_namespaces.push_back("queue_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::queue_allocator>(_data, "queue_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_allocator, m_ullTail), "m_ullTail");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::queue_allocator, m_ullHead), "m_ullHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_queue_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_queue_allocator>(_data, "fixed_queue_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullBlockSize), "m_ullBlockSize");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullTail), "m_ullTail");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_queue_allocator, m_ullHead), "m_ullHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_array_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_array_allocator>(_data, "fixed_array_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_array_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("__free_list_node");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::__free_list_node>(_data, "__free_list_node");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_namespaces.pop_back();
_namespaces.push_back("free_list_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::free_list_allocator>(_data, "free_list_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<__free_list_node*>(_data, _type, offsetof(Duckvil::Memory::free_list_allocator, m_pHead), "m_pHead");
_namespaces.pop_back();
_namespaces.push_back("fixed_vector_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::fixed_vector_allocator>(_data, "fixed_vector_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::fixed_vector_allocator, m_ullBlockSize), "m_ullBlockSize");
_namespaces.pop_back();
_namespaces.push_back("byte_buffer_allocator");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::byte_buffer_allocator>(_data, "byte_buffer_allocator");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
record_inheritance<allocator>(_data, _type, __protection::__protection_public);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::Memory::byte_buffer_allocator, m_ullPosition), "m_ullPosition");
_namespaces.pop_back();
_namespaces.push_back("ftable");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::Memory::ftable>(_data, "ftable");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "Memory");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 22);
_property = record_property<ftable::_basic_allocate>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnBasicAllocate), "m_fnBasicAllocate");
_property = record_property<ftable::_basic_free>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnBasicFree), "m_fnBasicFree");
_property = record_property<ftable::_calculate_aligned_pointer>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculateAlignedPointer), "m_fnCalculateAlignedPointer");
_property = record_property<ftable::_calculate_padding>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePadding), "m_fnCalculatePadding");
_property = record_property<ftable::_calculate_padding_h>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePaddingH), "m_fnCalculatePaddingH");
_property = record_property<ftable::_calculate_aligned_pointer_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculateAlignedPointer_), "m_fnCalculateAlignedPointer_");
_property = record_property<ftable::_calculate_padding_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePadding_), "m_fnCalculatePadding_");
_property = record_property<ftable::_calculate_padding_h_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnCalculatePaddingH_), "m_fnCalculatePaddingH_");
_property = record_property<ftable::_linear_allocate>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocate), "m_fnLinearAllocate");
_property = record_property<ftable::_linear_clear>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearClear), "m_fnLinearClear");
_property = record_property<ftable::_stack_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackAllocate_), "m_fnStackAllocate_");
_property = record_property<ftable::_stack_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackAllocateSize_), "m_fnStackAllocateSize_");
_property = record_property<ftable::_stack_top_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackTop_), "m_fnStackTop_");
_property = record_property<ftable::_stack_pop_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackPop_), "m_fnStackPop_");
_property = record_property<ftable::_stack_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackEmpty_), "m_fnStackEmpty_");
_property = record_property<ftable::_stack_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackFull_), "m_fnStackFull_");
_property = record_property<ftable::_stack_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackClear_), "m_fnStackClear_");
_property = record_property<ftable::_stack_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackSize_), "m_fnStackSize_");
_property = record_property<ftable::_stack_capacity_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnStackCapacity_), "m_fnStackCapacity_");
_property = record_property<ftable::_fixed_stack_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackAllocate_), "m_fnFixedStackAllocate_");
_property = record_property<ftable::_fixed_stack_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackAllocateSize_), "m_fnFixedStackAllocateSize_");
_property = record_property<ftable::_fixed_stack_top_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackTop_), "m_fnFixedStackTop_");
_property = record_property<ftable::_fixed_stack_pop_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackPop_), "m_fnFixedStackPop_");
_property = record_property<ftable::_fixed_stack_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackEmpty_), "m_fnFixedStackEmpty_");
_property = record_property<ftable::_fixed_stack_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackFull_), "m_fnFixedStackFull_");
_property = record_property<ftable::_fixed_stack_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackClear_), "m_fnFixedStackClear_");
_property = record_property<ftable::_fixed_stack_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackSize_), "m_fnFixedStackSize_");
_property = record_property<ftable::_fixed_stack_capacity_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedStackCapacity_), "m_fnFixedStackCapacity_");
_property = record_property<ftable::_queue_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueAllocate_), "m_fnQueueAllocate_");
_property = record_property<ftable::_queue_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueAllocateSize_), "m_fnQueueAllocateSize_");
_property = record_property<ftable::_queue_begin_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueBegin_), "m_fnQueueBegin_");
_property = record_property<ftable::_queue_pop_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueuePop_), "m_fnQueuePop_");
_property = record_property<ftable::_queue_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueEmpty_), "m_fnQueueEmpty_");
_property = record_property<ftable::_queue_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueFull_), "m_fnQueueFull_");
_property = record_property<ftable::_queue_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueClear_), "m_fnQueueClear_");
_property = record_property<ftable::_queue_resize_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueResize_), "m_fnQueueResize_");
_property = record_property<ftable::_queue_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueSize_), "m_fnQueueSize_");
_property = record_property<ftable::_queue_capacity_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnQueueCapacity_), "m_fnQueueCapacity_");
_property = record_property<ftable::_fixed_queue_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueAllocate_), "m_fnFixedQueueAllocate_");
_property = record_property<ftable::_fixed_queue_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueAllocateSize_), "m_fnFixedQueueAllocateSize_");
_property = record_property<ftable::_fixed_queue_begin_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueBegin_), "m_fnFixedQueueBegin_");
_property = record_property<ftable::_fixed_queue_pop_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueuePop_), "m_fnFixedQueuePop_");
_property = record_property<ftable::_fixed_queue_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueEmpty_), "m_fnFixedQueueEmpty_");
_property = record_property<ftable::_fixed_queue_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueFull_), "m_fnFixedQueueFull_");
_property = record_property<ftable::_fixed_queue_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueClear_), "m_fnFixedQueueClear_");
_property = record_property<ftable::_fixed_queue_resize_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueResize_), "m_fnFixedQueueResize_");
_property = record_property<ftable::_fixed_queue_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueSize_), "m_fnFixedQueueSize_");
_property = record_property<ftable::_fixed_queue_capacity_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedQueueCapacity_), "m_fnFixedQueueCapacity_");
_property = record_property<ftable::_fixed_array_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayAllocate_), "m_fnFixedArrayAllocate_");
_property = record_property<ftable::_fixed_array_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayAllocateSize_), "m_fnFixedArrayAllocateSize_");
_property = record_property<ftable::_fixed_array_begin_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayBegin_), "m_fnFixedArrayBegin_");
_property = record_property<ftable::_fixed_array_back_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayBack_), "m_fnFixedArrayBack_");
_property = record_property<ftable::_fixed_array_at_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayAt_), "m_fnFixedArrayAt_");
_property = record_property<ftable::_fixed_array_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayEmpty_), "m_fnFixedArrayEmpty_");
_property = record_property<ftable::_fixed_array_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayFull_), "m_fnFixedArrayFull_");
_property = record_property<ftable::_fixed_array_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArraySize_), "m_fnFixedArraySize_");
_property = record_property<ftable::_fixed_array_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedArrayClear_), "m_fnFixedArrayClear_");
_property = record_property<ftable::_free_list_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocate_), "m_fnFreeListAllocate_");
_property = record_property<ftable::_free_list_allocate_d_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocate_D_), "m_fnFreeListAllocate_D_");
_property = record_property<ftable::_free_list_reallocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListReallocate_), "m_fnFreeListReallocate_");
_property = record_property<ftable::_free_list_free_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListFree_), "m_fnFreeListFree_");
_property = record_property<ftable::_free_list_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListClear_), "m_fnFreeListClear_");
_property = record_property<ftable::_fixed_vector_allocate_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorAllocate_), "m_fnFixedVectorAllocate_");
_property = record_property<ftable::_fixed_vector_allocate_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorAllocateSize_), "m_fnFixedVectorAllocateSize_");
_property = record_property<ftable::_fixed_vector_begin_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorBegin_), "m_fnFixedVectorBegin_");
_property = record_property<ftable::_fixed_vector_back_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorBack_), "m_fnFixedVectorBack_");
_property = record_property<ftable::_fixed_vector_end_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorEnd_), "m_fnFixedVectorEnd_");
_property = record_property<ftable::_fixed_vector_at_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorAt_), "m_fnFixedVectorAt_");
_property = record_property<ftable::_fixed_vector_empty_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorEmpty_), "m_fnFixedVectorEmpty_");
_property = record_property<ftable::_fixed_vector_full_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorFull_), "m_fnFixedVectorFull_");
_property = record_property<ftable::_fixed_vector_clear_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorClear_), "m_fnFixedVectorClear_");
_property = record_property<ftable::_fixed_vector_resize_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorResize_), "m_fnFixedVectorResize_");
_property = record_property<ftable::_fixed_vector_size_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorSize_), "m_fnFixedVectorSize_");
_property = record_property<ftable::_fixed_vector_capacity_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorCapacity_), "m_fnFixedVectorCapacity_");
_property = record_property<ftable::_fixed_vector_erase_>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFixedVectorErase_), "m_fnFixedVectorErase_");
_property = record_property<ftable::_byte_buffer_will_fit>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferWillFit_), "m_fnByteBufferWillFit_");
_property = record_property<ftable::_byte_buffer_clear>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferClear_), "m_fnByteBufferClear_");
_property = record_property<ftable::_byte_buffer_resize>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferResize_), "m_fnByteBufferResize_");
_property = record_property<ftable::_byte_buffer_seek_to_begin>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferSeekToBegin_), "m_fnByteBufferSeekToBegin_");
_property = record_property<ftable::_byte_buffer_seek_to_end>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferSeekToEnd_), "m_fnByteBufferSeekToEnd_");
_property = record_property<ftable::_byte_buffer_advance>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferAdvance_), "m_fnByteBufferAdvance_");
_property = record_property<ftable::_byte_buffer_write>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferWrite_), "m_fnByteBufferWrite_");
_property = record_property<ftable::_byte_buffer_read>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnByteBufferRead_), "m_fnByteBufferRead_");
_property = record_property<ftable::_linear_allocate_linear_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateLinearAllocator), "m_fnLinearAllocateLinearAllocator");
_property = record_property<ftable::_linear_allocate_fixed_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedStackAllocator), "m_fnLinearAllocateFixedStackAllocator");
_property = record_property<ftable::_linear_allocate_fixed_array_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedArrayAllocator), "m_fnLinearAllocateFixedArrayAllocator");
_property = record_property<ftable::_linear_allocate_free_list_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFreeListAllocator), "m_fnLinearAllocateFreeListAllocator");
_property = record_property<ftable::_linear_allocate_fixed_vector_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateFixedVectorAllocator), "m_fnLinearAllocateFixedVectorAllocator");
_property = record_property<ftable::_linear_allocate_byte_buffer_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnLinearAllocateByteBufferAllocator), "m_fnLinearAllocateByteBufferAllocator");
_property = record_property<ftable::_free_list_allocate_queue_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateQueueAllocator), "m_fnFreeListAllocateQueueAllocator");
_property = record_property<ftable::_free_list_allocate_fixed_queue_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedQueueAllocator), "m_fnFreeListAllocateFixedQueueAllocator");
_property = record_property<ftable::_free_list_allocate_free_list_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFreeListAllocator), "m_fnFreeListAllocateFreeListAllocator");
_property = record_property<ftable::_free_list_allocate_fixed_vector_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedVectorAllocator), "m_fnFreeListAllocateFixedVectorAllocator");
_property = record_property<ftable::_free_list_allocate_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateStackAllocator), "m_fnFreeListAllocateStackAllocator");
_property = record_property<ftable::_free_list_allocate_fixed_stack_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedStackAllocator), "m_fnFreeListAllocateFixedStackAllocator");
_property = record_property<ftable::_free_list_allocate_fixed_array_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateFixedArrayAllocator), "m_fnFreeListAllocateFixedArrayAllocator");
_property = record_property<ftable::_free_list_allocate_byte_buffer_allocator>(_data, _type, offsetof(Duckvil::Memory::ftable, m_fnFreeListAllocateByteBufferAllocator), "m_fnFreeListAllocateByteBufferAllocator");
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
return duckvil_recorded_types_create(_data._pMemoryInterface, _data._pAllocator, _recordedTypes, "Memory/Memory.h", 22);
}
#ifdef DUCKVIL_RUNTIME_COMPILE
DUCKVIL_EXPORT uint32_t duckvil_get_recorder_index()
{
return 22;
}
#endif
