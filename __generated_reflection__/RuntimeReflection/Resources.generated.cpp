#include "RuntimeReflection/Resources.h"
#include "RuntimeReflection/Recorder.h"
#include "RuntimeReflection/GeneratedMeta.h"


DUCKVIL_RUNTIME_REFLECTION_RECORD(12)
{
using namespace Duckvil::RuntimeReflection;
using namespace Duckvil;
DUCKVIL_RESOURCE(type_t) _type;
DUCKVIL_RESOURCE(property_t) _property;
DUCKVIL_RESOURCE(constructor_t) _constructor;
DUCKVIL_RESOURCE(destructor_t) _destructor;
DUCKVIL_RESOURCE(function_t) _function;
DUCKVIL_RESOURCE(enum_t) _enum;
DUCKVIL_RESOURCE(enum_element_t) _enumElement;
DUCKVIL_RESOURCE(ntype_t) _ntype;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t> _recordedTypes;
std::vector<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t> _recordedNTypes;
std::vector<const char*> _namespaces;
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("RuntimeReflection");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("__ftable");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.pop_back();
_namespaces.push_back("__data");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.pop_back();
_namespaces.push_back("__recorder_ftable");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
_namespaces.push_back("duckvil_frontend_reflection_context");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<duckvil_frontend_reflection_context>(_data, "duckvil_frontend_reflection_context");
_recordedTypes.push_back(_type);
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__ftable const*>(_data, _type, offsetof(duckvil_frontend_reflection_context, m_pReflection), "m_pReflection");
_property = record_property<Duckvil::RuntimeReflection::__data*>(_data, _type, offsetof(duckvil_frontend_reflection_context, m_pReflectionData), "m_pReflectionData");
_property = record_property<Duckvil::RuntimeReflection::__recorder_ftable const*>(_data, _type, offsetof(duckvil_frontend_reflection_context, m_pRecorder), "m_pRecorder");
_namespaces.pop_back();
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("PlugNPlay");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("__module_information");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
{
_namespaces.push_back("Duckvil");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
{
_namespaces.push_back("RuntimeReflection");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_namespaces.push_back("__duckvil_resource_type_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
using namespace Duckvil::RuntimeReflection;
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(_data, "__duckvil_resource_type_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_type_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_constructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_constructor_t>(_data, "__duckvil_resource_constructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_constructor_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_destructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_destructor_t>(_data, "__duckvil_resource_destructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_destructor_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_property_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_property_t>(_data, "__duckvil_resource_property_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_property_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_namespace_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_namespace_t>(_data, "__duckvil_resource_namespace_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_namespace_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_inheritance_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_inheritance_t>(_data, "__duckvil_resource_inheritance_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_inheritance_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_function_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_function_t>(_data, "__duckvil_resource_function_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_function_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_variant_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_variant_t>(_data, "__duckvil_resource_variant_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_variant_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_meta_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(_data, "__duckvil_resource_meta_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_meta_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_argument_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_argument_t>(_data, "__duckvil_resource_argument_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_argument_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_enum_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_enum_t>(_data, "__duckvil_resource_enum_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_enum_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_enum_element_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_enum_element_t>(_data, "__duckvil_resource_enum_element_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_enum_element_t, m_ID), "m_ID");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_resource_ntype_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t>(_data, "__duckvil_resource_ntype_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_resource_ntype_t, m_ID), "m_ID");
_namespaces.pop_back();
_enum = record_enum<Duckvil::RuntimeReflection::__protection>(_data, _ntype, "__protection");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__protection::__protection_public, "__protection_public");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__protection::__protection_protected, "__protection_protected");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__protection::__protection_private, "__protection_private");
_enum = record_enum<Duckvil::RuntimeReflection::__variant_owner>(_data, _ntype, "__variant_owner");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_object, "__variant_owner_object");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_type, "__variant_owner_type");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_property, "__variant_owner_property");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_constructor, "__variant_owner_constructor");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_constructor_argument, "__variant_owner_constructor_argument");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_function, "__variant_owner_function");
_enumElement = record_enum_element(_data, _ntype, _enum, Duckvil::RuntimeReflection::__variant_owner::__variant_owner_function_argument, "__variant_owner_function_argument");
_namespaces.push_back("__variant");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__variant>(_data, "__variant");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_constructor = record_constructor<Duckvil::RuntimeReflection::__variant>(_data, _type);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant, m_ullSize), "m_ullSize");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant, m_ullTypeID), "m_ullTypeID");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant, m_pData), "m_pData");
_property = record_property<property_traits>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant, m_traits), "m_traits");
_namespaces.pop_back();
_namespaces.push_back("__variant_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__variant_t>(_data, "__variant_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__variant>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant_t, m_variant), "m_variant");
_property = record_property<Duckvil::RuntimeReflection::__variant_owner>(_data, _type, offsetof(Duckvil::RuntimeReflection::__variant_t, m_owner), "m_owner");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___variant_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, "__duckvil_slot_array___variant_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t, m_indices), "m_indices");
_property = record_property<__variant_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__meta_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__meta_t>(_data, "__meta_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__meta_t, m_key), "m_key");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__meta_t, m_value), "m_value");
_property = record_property<uint32_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__meta_t, m_uiOwner), "m_uiOwner");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___meta_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, "__duckvil_slot_array___meta_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t, m_indices), "m_indices");
_property = record_property<__meta_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__argument_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__argument_t>(_data, "__argument_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__argument_t, m_ullTypeID), "m_ullTypeID");
_property = record_property<property_traits>(_data, _type, offsetof(Duckvil::RuntimeReflection::__argument_t, m_traits), "m_traits");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__argument_t, m_metas), "m_metas");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___argument_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___argument_t>(_data, "__duckvil_slot_array___argument_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___argument_t, m_indices), "m_indices");
_property = record_property<__argument_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___argument_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__constructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__constructor_t>(_data, "__constructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___argument_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__constructor_t, m_arguments), "m_arguments");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__constructor_t, m_metas), "m_metas");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__constructor_t, m_ullTypeID), "m_ullTypeID");
_property = record_property<uint8_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__constructor_t, m_pData), "m_pData");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__constructor_t, m_owner), "m_owner");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___constructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___constructor_t>(_data, "__duckvil_slot_array___constructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___constructor_t, m_indices), "m_indices");
_property = record_property<__constructor_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___constructor_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__destructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__destructor_t>(_data, "__destructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__destructor_t, m_metas), "m_metas");
_property = record_property<uint8_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__destructor_t, m_pData), "m_pData");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__destructor_t, m_owner), "m_owner");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___destructor_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___destructor_t>(_data, "__duckvil_slot_array___destructor_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___destructor_t, m_indices), "m_indices");
_property = record_property<__destructor_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___destructor_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__property_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__property_t>(_data, "__property_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_metas), "m_metas");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_ullTypeID), "m_ullTypeID");
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_sName), "m_sName");
_property = record_property<uintptr_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_ullAddress), "m_ullAddress");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_owner), "m_owner");
_property = record_property<property_traits>(_data, _type, offsetof(Duckvil::RuntimeReflection::__property_t, m_traits), "m_traits");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___property_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___property_t>(_data, "__duckvil_slot_array___property_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___property_t, m_indices), "m_indices");
_property = record_property<__property_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___property_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__namespace_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__namespace_t>(_data, "__namespace_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__namespace_t, m_sNamespaceName), "m_sNamespaceName");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___namespace_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___namespace_t>(_data, "__duckvil_slot_array___namespace_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___namespace_t, m_indices), "m_indices");
_property = record_property<__namespace_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___namespace_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__inheritance_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__inheritance_t>(_data, "__inheritance_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__inheritance_t, m_ullInheritanceTypeID), "m_ullInheritanceTypeID");
_property = record_property<Duckvil::RuntimeReflection::__protection>(_data, _type, offsetof(Duckvil::RuntimeReflection::__inheritance_t, m_protection), "m_protection");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___inheritance_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___inheritance_t>(_data, "__duckvil_slot_array___inheritance_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___inheritance_t, m_indices), "m_indices");
_property = record_property<__inheritance_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___inheritance_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__function_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__function_t>(_data, "__function_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_metas), "m_metas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___argument_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_arguments), "m_arguments");
_property = record_property<__ifunction*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_pFunction), "m_pFunction");
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_sFunctionName), "m_sFunctionName");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_ullReturnTypeID), "m_ullReturnTypeID");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_ullArgumentsTypeID), "m_ullArgumentsTypeID");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_pRawFunction), "m_pRawFunction");
_property = record_property<function_traits>(_data, _type, offsetof(Duckvil::RuntimeReflection::__function_t, m_traits), "m_traits");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___function_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___function_t>(_data, "__duckvil_slot_array___function_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___function_t, m_indices), "m_indices");
_property = record_property<__function_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___function_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__enum_element_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__enum_element_t>(_data, "__enum_element_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_element_t, m_metas), "m_metas");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_element_t, m_pValue), "m_pValue");
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_element_t, m_sName), "m_sName");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___enum_element_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___enum_element_t>(_data, "__duckvil_slot_array___enum_element_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___enum_element_t, m_indices), "m_indices");
_property = record_property<__enum_element_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___enum_element_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__enum_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__enum_t>(_data, "__enum_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_t, m_metas), "m_metas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___enum_element_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_t, m_elements), "m_elements");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_t, m_ullTypeID), "m_ullTypeID");
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__enum_t, m_sName), "m_sName");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___enum_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___enum_t>(_data, "__duckvil_slot_array___enum_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___enum_t, m_indices), "m_indices");
_property = record_property<__enum_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___enum_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__type_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__type_t>(_data, "__type_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___constructor_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_constructors), "m_constructors");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___destructor_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_destructors), "m_destructors");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___property_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_properties), "m_properties");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___namespace_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_namespaces), "m_namespaces");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___inheritance_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_inheritances), "m_inheritances");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___function_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_functions), "m_functions");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_variantKeys), "m_variantKeys");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_variantValues), "m_variantValues");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_metas), "m_metas");
_property = record_property<std::size_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_ullTypeID), "m_ullTypeID");
_property = record_property<char*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_sTypeName), "m_sTypeName");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_uiSlotIndex), "m_uiSlotIndex");
_property = record_property<PlugNPlay::__module_information const*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__type_t, m_pModule), "m_pModule");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___type_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___type_t>(_data, "__duckvil_slot_array___type_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___type_t, m_indices), "m_indices");
_property = record_property<__type_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___type_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__ntype_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__ntype_t>(_data, "__ntype_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___property_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_properties), "m_properties");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___namespace_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_namespaces), "m_namespaces");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___function_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_functions), "m_functions");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___enum_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_enums), "m_enums");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_variantKeys), "m_variantKeys");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ntype_t, m_variantValues), "m_variantValues");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___ntype_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___ntype_t>(_data, "__duckvil_slot_array___ntype_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___ntype_t, m_indices), "m_indices");
_property = record_property<__ntype_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___ntype_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__object_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__object_t>(_data, "__object_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__object_t, m_variantKeys), "m_variantKeys");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___variant_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__object_t, m_variantValues), "m_variantValues");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___meta_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__object_t, m_metas), "m_metas");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__object_t, m_pObject), "m_pObject");
_namespaces.pop_back();
_namespaces.push_back("__duckvil_slot_array___object_t");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__duckvil_slot_array___object_t>(_data, "__duckvil_slot_array___object_t");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<uint32_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___object_t, m_indices), "m_indices");
_property = record_property<__object_t*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__duckvil_slot_array___object_t, m_data), "m_data");
_namespaces.pop_back();
_namespaces.push_back("__data");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__data>(_data, "__data");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___type_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__data, m_aTypes), "m_aTypes");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___ntype_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__data, m_aNTypes), "m_aNTypes");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_slot_array___object_t>(_data, _type, offsetof(Duckvil::RuntimeReflection::__data, m_aObjects), "m_aObjects");
_property = record_property<void*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__data, m_pEvents), "m_pEvents");
_property = record_property<std::unordered_map<std::size_t, __duckvil_resource_type_t>*>(_data, _type, offsetof(Duckvil::RuntimeReflection::__data, m_pTypesByTypeID), "m_pTypesByTypeID");
_namespaces.pop_back();
_namespaces.push_back("__ftable");
_ntype = record_type(_data, _namespaces);
_recordedNTypes.push_back(_ntype);
_type = record_type<Duckvil::RuntimeReflection::__ftable>(_data, "__ftable");
_recordedTypes.push_back(_type);
record_namespace(_data, _type, "Duckvil");
record_namespace(_data, _type, "RuntimeReflection");
record_meta(_data, _type, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_RecorderID, 12);
_property = record_property<__data*(*)(Memory::ftable const*,Memory::free_list_allocator*,__ftable const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnInit), "m_fnInit");
_property = record_property<duckvil_frontend_reflection_context*(*)(Memory::ftable const*,Memory::free_list_allocator*,__ftable const*,__data*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnCreateContext), "m_fnCreateContext");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t(*)(__data*,char const*,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeHandleByName), "m_fnGetTypeHandleByName");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_type_t(*)(__data*,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeHandleByTypeID), "m_fnGetTypeHandleByTypeID");
_property = record_property<__type_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeByHandle), "m_fnGetTypeByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_type_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypes), "m_fnGetTypes");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_constructor_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructors), "m_fnGetConstructors");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_constructor_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorHandleByTypeID), "m_fnGetConstructorHandleByTypeID");
_property = record_property<__constructor_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructor), "m_fnGetConstructor");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_destructor_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetDestructorHandle), "m_fnGetDestructorHandle");
_property = record_property<void const*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyValueByHandle), "m_fnGetPropertyValueByHandle");
_property = record_property<void const*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,char const*,std::size_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyValueByName), "m_fnGetPropertyValueByName");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_property_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,char const*,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyHandleByName), "m_fnGetPropertyHandleByName");
_property = record_property<void const*(*)(__data*,char const*,std::size_t,std::size_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyValue), "m_fnGetPropertyValue");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_property_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetProperties), "m_fnGetProperties");
_property = record_property<__property_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyByHandle), "m_fnGetPropertyByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_function_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctions), "m_fnGetFunctions");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_function_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,char const*,std::size_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionHandle), "m_fnGetFunctionHandle");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_function_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionHandleByPointer), "m_fnGetFunctionHandleByPointer");
_property = record_property<__ifunction*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,char const*,std::size_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionCallback), "m_fnGetFunctionCallback");
_property = record_property<__ifunction*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionCallbackByHandle), "m_fnGetFunctionCallbackByHandle");
_property = record_property<__function_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionByHandle), "m_fnGetFunctionByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_argument_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArguments), "m_fnGetConstructorArguments");
_property = record_property<__argument_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,Duckvil::RuntimeReflection::__duckvil_resource_argument_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgument), "m_fnGetConstructorArgument");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_argument_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArguments), "m_fnGetFunctionArguments");
_property = record_property<__argument_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,Duckvil::RuntimeReflection::__duckvil_resource_argument_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgument), "m_fnGetFunctionArgument");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_inheritance_t>(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetInheritances), "m_fnGetInheritances");
_property = record_property<__inheritance_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_inheritance_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetInheritance), "m_fnGetInheritance");
_property = record_property<bool(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnInherits), "m_fnInherits");
_property = record_property<bool(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnInheritsByTypeID), "m_fnInheritsByTypeID");
_property = record_property<bool(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnInheritsByHandle), "m_fnInheritsByHandle");
_property = record_property<__variant_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_variant_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetVariantKeyByHandle), "m_fnGetVariantKeyByHandle");
_property = record_property<__variant_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_variant_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetVariantValueByHandle), "m_fnGetVariantValueByHandle");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_ntype_t(*)(__data*,std::vector<const char *> const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNTypeHandleByNamespaces), "m_fnGetNTypeHandleByNamespaces");
_property = record_property<__ntype_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNTypeByHandle), "m_fnGetNTypeByHandle");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_enum_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,char const*,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumHandleByName), "m_fnGetNEnumHandleByName");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_enum_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumHandleByTypeID), "m_fnGetNEnumHandleByTypeID");
_property = record_property<__enum_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumByHandle), "m_fnGetNEnumByHandle");
_property = record_property<__enum_t const&(*)(__data*,std::size_t,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t*,Duckvil::RuntimeReflection::__duckvil_resource_enum_t*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumByTypeID), "m_fnGetNEnumByTypeID");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_enum_element_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,char const*,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumElementHandleByName), "m_fnGetNEnumElementHandleByName");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_enum_element_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,void const*,std::size_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumElementHandleByValue), "m_fnGetNEnumElementHandleByValue");
_property = record_property<__enum_element_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_ntype_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_element_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetNEnumElementByHandle), "m_fnGetNEnumElementByHandle");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_meta_t(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,void*,std::size_t,std::size_t,uint8_t,property_traits,void const*,std::size_t,std::size_t,uint8_t,property_traits,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnAddObjectMeta), "m_fnAddObjectMeta");
_property = record_property<__variant_t const&(*)(__data*,void*,std::size_t,std::size_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetObjectMeta), "m_fnGetObjectMeta");
_property = record_property<void(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,void*,std::size_t,std::size_t,void const*,std::size_t,std::size_t,uint8_t,property_traits,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnSetObjectMeta), "m_fnSetObjectMeta");
_property = record_property<void(*)(__data*,void*,std::size_t,std::size_t,void const*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnRemoveObjectMeta), "m_fnRemoveObjectMeta");
_property = record_property<void(*)(__data*,Memory::ftable const*,Memory::free_list_allocator*,void*)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnClearObjectMetas), "m_fnClearObjectMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeMetaHandle), "m_fnGetTypeMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeMetaValue), "m_fnGetTypeMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeMetaVariant), "m_fnGetTypeMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeMetaByHandle), "m_fnGetTypeMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetTypeMetas), "m_fnGetTypeMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyMetaHandle), "m_fnGetPropertyMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyMetaValue), "m_fnGetPropertyMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyMetaVariant), "m_fnGetPropertyMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyMetaByHandle), "m_fnGetPropertyMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_property_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetPropertyMetas), "m_fnGetPropertyMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionMetaHandle), "m_fnGetFunctionMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionMetaValue), "m_fnGetFunctionMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionMetaVariant), "m_fnGetFunctionMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionMetaByHandle), "m_fnGetFunctionMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionMetas), "m_fnGetFunctionMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgumentMetaHandle), "m_fnGetFunctionArgumentMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgumentMetaValue), "m_fnGetFunctionArgumentMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgumentMetaVariant), "m_fnGetFunctionArgumentMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,uint32_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgumentMetaByHandle), "m_fnGetFunctionArgumentMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_function_t,uint32_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetFunctionArgumentMetas), "m_fnGetFunctionArgumentMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorMetaHandle), "m_fnGetConstructorMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorMetaValue), "m_fnGetConstructorMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorMetaVariant), "m_fnGetConstructorMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorMetaByHandle), "m_fnGetConstructorMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorMetas), "m_fnGetConstructorMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgumentMetaHandle), "m_fnGetConstructorArgumentMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgumentMetaValue), "m_fnGetConstructorArgumentMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,uint32_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgumentMetaVariant), "m_fnGetConstructorArgumentMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,uint32_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgumentMetaByHandle), "m_fnGetConstructorArgumentMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_constructor_t,uint32_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetConstructorArgumentMetas), "m_fnGetConstructorArgumentMetas");
_property = record_property<Duckvil::RuntimeReflection::__duckvil_resource_variant_t(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetEnumMetaHandle), "m_fnGetEnumMetaHandle");
_property = record_property<void*(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetEnumMetaValue), "m_fnGetEnumMetaValue");
_property = record_property<__variant const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,void const*,std::size_t const&,std::size_t const&)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetEnumMetaVariant), "m_fnGetEnumMetaVariant");
_property = record_property<__meta_t const&(*)(__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t,Duckvil::RuntimeReflection::__duckvil_resource_meta_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetEnumMetaByHandle), "m_fnGetEnumMetaByHandle");
_property = record_property<Memory::Vector<Duckvil::RuntimeReflection::__duckvil_resource_meta_t>(*)(Memory::FreeList const&,__data*,Duckvil::RuntimeReflection::__duckvil_resource_type_t,Duckvil::RuntimeReflection::__duckvil_resource_enum_t)>(_data, _type, offsetof(Duckvil::RuntimeReflection::__ftable, m_fnGetEnumMetas), "m_fnGetEnumMetas");
_namespaces.pop_back();
_namespaces.pop_back();
}
_namespaces.pop_back();
}
return duckvil_recorded_types_create(_data._pMemoryInterface, _data._pAllocator, _recordedTypes, "RuntimeReflection/Resources.h", 12);
}
#ifdef DUCKVIL_RUNTIME_COMPILE
DUCKVIL_EXPORT uint32_t duckvil_get_recorder_index()
{
return 12;
}
#endif
