#include "TestSystem/TestSystem.h"

#include <cstdio>

#include "Event/ImmediatePool.h"

#include "Thread/ThreadPool.h"

#include "RuntimeReflection/GeneratedMeta.h"
#include "RuntimeReflection/Meta.h"

namespace Duckvil { namespace LOL {

    Test::Test()
    {
        m_iA = 20;
    }

    Test::Test(const Memory::FreeList& _heap)
    {
        const auto& _typeH = RuntimeReflection::get_type<Test>();
        const auto& _fH = RuntimeReflection::get_function_handle<void*>(_typeH, "Cast");

        const auto& _a = RuntimeReflection::get_meta(_typeH, _fH, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated);
        const bool* _b = (const bool*)RuntimeReflection::get_meta_value_ptr(_typeH, _fH, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated);
        const auto& _c = RuntimeReflection::get_meta_value_handle(_typeH, _fH, Duckvil::RuntimeReflection::GeneratedMeta::GeneratedMeta_AutoGenerated);
        auto _d = RuntimeReflection::get_metas(_typeH, _fH);
        const auto& _fAH = RuntimeReflection::get_arguments(_typeH, _fH);

        const auto& _cH = RuntimeReflection::get_constructor_handle<const Memory::FreeList&>(_typeH);
        auto _e = RuntimeReflection::get_arguments(_typeH, _cH);

        for(const auto& _f : _e)
        {
            auto _xx = RuntimeReflection::get_argument(_typeH, _cH, _f);
            // printf("AAAA\n");
        }

        for(const auto& _f : _fAH)
        {
            auto _xx = RuntimeReflection::get_argument(_typeH, _fH, _f);
            // printf("AAAA\n");
        }
    }

    Test::~Test()
    {

    }

    bool Test::Init()
    {
        m_iA = 100;

        printf("Hello from engine TestSystem!\n");

        return true;
    }

    void Test::Update(double _dDelta)
    {
        // DUCKVIL_LOG_INFO(m_pLogger, m_pLoggerData, "axxxa %i", m_iA);
        // printf("%ii\n", m_iA);
        // printf("AAAAAA\n");

        // DUCKVIL_LOG_INFO("a %i", m_iA);
    }

    void Test::InitEditor(void* _pImguiContext)
    {
        ImGui::SetCurrentContext((ImGuiContext*)_pImguiContext);
    }

    void Test::OnDraw()
    {
        ImGui::Begin("TestSystem");

        ImGui::Text("1234");

        ImGui::End();
    }

}}