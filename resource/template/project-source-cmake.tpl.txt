cmake_minimum_required(VERSION 3.16)
add_definitions(-DDUCKVIL_COMPILE_REFLECTION_SOURCE)
FILE(GLOB GENERATED_SRC_FILES ${CMAKE_SOURCE_DIR}/__generated_reflection__/*.cpp)
# FILE(GLOB children */CMakeLists.txt)
FILE(GLOB SOURCE_FILES *.cpp)
add_library({$projectName} SHARED
    ${SOURCE_FILES}
    ${GENERATED_SRC_FILES}
    E:/Projects/C++/Duckvil/external/imgui/imgui.cpp
    E:/Projects/C++/Duckvil/external/imgui/imgui_draw.cpp
    E:/Projects/C++/Duckvil/external/imgui/imgui_tables.cpp
    E:/Projects/C++/Duckvil/external/imgui/imgui_widgets.cpp
    E:/Projects/C++/Duckvil/external/imgui/backends/imgui_impl_opengl3.cpp
    E:/Projects/C++/Duckvil/external/imgui/backends/imgui_impl_sdl.cpp
)
list(APPEND INCLUDES
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/__generated_reflection__
    {$duckvilWorkingDirectory}/include
    {$duckvilWorkingDirectory}/external
    {$duckvilWorkingDirectory}/__generated_reflection__
    E:/Projects/C++/Duckvil/include
    E:/Projects/C++/Duckvil/external
    E:/Projects/C++/Duckvil/__generated_reflection__
    E:/Projects/C++/Duckvil/external/imgui
    E:/Projects/C++/Duckvil/external/imgui/backends
    E:/Projects/C++/Duckvil/external/SDL2/include
    E:/Projects/C++/Duckvil/external/glew/include
    E:/Projects/C++/Duckvil/external/hex_editor
)
target_include_directories({$projectName} PRIVATE ${INCLUDES})
target_link_libraries({$projectName} {$duckvilWorkingDirectory}/bin/Window.lib {$duckvilWorkingDirectory}/bin/Utils.lib E:/Projects/C++/Duckvil/bin/glew32.lib E:/Projects/C++/Duckvil/bin/SDL2.lib)
set_target_properties({$projectName} PROPERTIES
    CXX_STANDARD 20
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
    LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
    LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
    DEBUG_POSTFIX ""
    PREFIX ""
)
# BEGIN SUBDIRECTORIES
# END SUBDIRECTORIES
# FOREACH(child ${children})
#     get_filename_component(PARENT_DIR ${child} DIRECTORY)
#     add_subdirectory(${PARENT_DIR})
#     get_filename_component(PROJECT_ID ${PARENT_DIR} NAME)
#     target_include_directories(
#         ${PROJECT_ID} PRIVATE
#         ${INCLUDES}
#     )
#     get_target_property(
#         TARGET_TYPE ${PROJECT_ID} TYPE
#     )
#     if(${TARGET_TYPE} STREQUAL "EXECUTABLE" OR ${TARGET_TYPE} STREQUAL "SHARED_LIBRARY")
#         set_target_properties(${PROJECT_ID} PROPERTIES
#             CXX_STANDARD 20
#             LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
#             ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
#             RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin
#             LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
#             ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
#             RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin
#             LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
#             ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
#             RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin
#             DEBUG_POSTFIX 
#             PREFIX 
#         )
#     endif()
# ENDFOREACH()
